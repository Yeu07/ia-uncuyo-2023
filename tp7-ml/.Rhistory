install.packages('caret', dependencies = TRUE)
suppressMessages(library(rpart))
install.packages("rpart")
install.packages("rpart")
install.packages("caret")
install.packages("readr")
install.packages("dplyr")
install.packages("ggplot2")
install.packages("ggmap")
library(caret)
library(rpart)
cross_validation <- function(dataframe, k) {
set.seed(123)  # Para reproducibilidad
# Crear un modelo de control para la validación cruzada
ctrl <- trainControl(method = "cv", number = k, classProbs = TRUE)
# Definir la fórmula
train_formula <- formula(inclinacion_peligrosa ~ especie + circ_tronco_cm)
# Entrenar el modelo usando rpart con el control definido
tree_model <- train(train_formula, data = dataframe, method = "class", trControl = ctrl)
# Calcular las predicciones en la validación cruzada
predictions <- predict(tree_model, newdata = dataframe, type = "raw")
# Calcular métricas
confusion_matrix <- confusionMatrix(predictions, dataframe$inclinacion_peligrosa)
# Calcular Precision, Sensitivity y Specificity
precision <- confusion_matrix$byClass["Pos Pred Value"]
sensitivity <- confusion_matrix$byClass["Sensitivity"]
specificity <- confusion_matrix$byClass["Specificity"]
# Crear un objeto para almacenar todas las métricas
metrics <- list(Accuracy = confusion_matrix$overall["Accuracy"],
Precision = precision,
Sensitivity = sensitivity,
Specificity = specificity)
# Retornar las métricas
return(metrics)
}
data <- read.csv("arbolado-mza-dataset.csv")
setwd("C:/Users/yeume/Documents/ia-uncuyo-2023/tp7-ml")
data <- read.csv("arbolado-mza-dataset.csv")
data$inclinacion_peligrosa <- as.factor(data$inclinacion_peligrosa)
print(levels(data$inclinacion_peligrosa))
# Realizar validación cruzada
result <- cross_validation(data, 2)
library(caret)
library(rpart)
cross_validation <- function(dataframe, k) {
set.seed(123)  # Para reproducibilidad
# Crear un modelo de control para la validación cruzada
ctrl <- trainControl(method = "cv", number = k, classProbs = TRUE)
# Definir la fórmula
train_formula <- formula(inclinacion_peligrosa ~ especie + circ_tronco_cm)
# Entrenar el modelo usando rpart con el control definido
tree_model<-rpart(train_formula, data=training1, method='class')
# Calcular las predicciones en la validación cruzada
predictions <- predict(tree_model, newdata = dataframe, type = "raw")
# Calcular métricas
confusion_matrix <- confusionMatrix(predictions, dataframe$inclinacion_peligrosa)
# Calcular Precision, Sensitivity y Specificity
precision <- confusion_matrix$byClass["Pos Pred Value"]
sensitivity <- confusion_matrix$byClass["Sensitivity"]
specificity <- confusion_matrix$byClass["Specificity"]
# Crear un objeto para almacenar todas las métricas
metrics <- list(Accuracy = confusion_matrix$overall["Accuracy"],
Precision = precision,
Sensitivity = sensitivity,
Specificity = specificity)
# Retornar las métricas
return(metrics)
}
data <- read.csv("arbolado-mza-dataset.csv")
data$inclinacion_peligrosa <- as.factor(data$inclinacion_peligrosa)
print(levels(data$inclinacion_peligrosa))
# Realizar validación cruzada
result <- cross_validation(data, 2)
library(caret)
library(rpart)
cross_validation <- function(dataframe, k) {
set.seed(123)  # Para reproducibilidad
# Crear un modelo de control para la validación cruzada
ctrl <- trainControl(method = "cv", number = k, classProbs = TRUE)
# Definir la fórmula
train_formula <- formula(inclinacion_peligrosa ~ especie + circ_tronco_cm)
# Entrenar el modelo usando rpart con el control definido
tree_model<-rpart(train_formula, data=dataframe, method='class')
# Calcular las predicciones en la validación cruzada
predictions <- predict(tree_model, newdata = dataframe, type = "raw")
# Calcular métricas
confusion_matrix <- confusionMatrix(predictions, dataframe$inclinacion_peligrosa)
# Calcular Precision, Sensitivity y Specificity
precision <- confusion_matrix$byClass["Pos Pred Value"]
sensitivity <- confusion_matrix$byClass["Sensitivity"]
specificity <- confusion_matrix$byClass["Specificity"]
# Crear un objeto para almacenar todas las métricas
metrics <- list(Accuracy = confusion_matrix$overall["Accuracy"],
Precision = precision,
Sensitivity = sensitivity,
Specificity = specificity)
# Retornar las métricas
return(metrics)
}
data$inclinacion_peligrosa <- as.factor(data$inclinacion_peligrosa)
print(levels(data$inclinacion_peligrosa))
# Realizar validación cruzada
result <- cross_validation(data, 2)
library(caret)
library(rpart)
cross_validation <- function(dataframe, k) {
set.seed(123)  # Para reproducibilidad
# Crear un modelo de control para la validación cruzada
ctrl <- trainControl(method = "cv", number = k, classProbs = TRUE)
# Definir la fórmula
train_formula <- formula(inclinacion_peligrosa ~ especie + circ_tronco_cm)
# Entrenar el modelo usando rpart con el control definido
tree_model<-rpart(train_formula, data=dataframe, method='class')
# Calcular las predicciones en la validación cruzada
predictions <- predict(tree_model, newdata = dataframe, type = "raw")
# Calcular métricas
confusion_matrix <- confusionMatrix(predictions, dataframe$inclinacion_peligrosa)
}
data <- read.csv("arbolado-mza-dataset.csv")
data$inclinacion_peligrosa <- as.factor(data$inclinacion_peligrosa)
print(levels(data$inclinacion_peligrosa))
# Realizar validación cruzada
result <- cross_validation(data, 2)
library(caret)
library(rpart)
cross_validation <- function(dataframe, k) {
set.seed(123)  # Para reproducibilidad
# Crear un modelo de control para la validación cruzada
ctrl <- trainControl(method = "cv", number = k, classProbs = TRUE)
# Definir la fórmula
train_formula <- formula(inclinacion_peligrosa ~ especie + circ_tronco_cm)
# Entrenar el modelo usando rpart con el control definido
tree_model<-rpart(train_formula, data=dataframe, method='class')
# Calcular las predicciones en la validación cruzada
predictions <- predict(tree_model, newdata = dataframe, type = "class")
# Calcular métricas
confusion_matrix <- confusionMatrix(predictions, dataframe$inclinacion_peligrosa)
}
data <- read.csv("arbolado-mza-dataset.csv")
data$inclinacion_peligrosa <- as.factor(data$inclinacion_peligrosa)
print(levels(data$inclinacion_peligrosa))
# Realizar validación cruzada
result <- cross_validation(data, 2)
print(result)
library(caret)
library(rpart)
cross_validation <- function(dataframe, k) {
set.seed(123)  # Para reproducibilidad
# Crear un modelo de control para la validación cruzada
ctrl <- trainControl(method = "cv", number = k, classProbs = TRUE)
# Definir la fórmula
train_formula<-formula(inclinacion_peligrosa~
circ_tronco_cm+
lat+long+
seccion)
# Entrenar el modelo usando rpart con el control definido
tree_model<-rpart(train_formula, data=dataframe, method='class')
# Calcular las predicciones en la validación cruzada
predictions <- predict(tree_model, newdata = dataframe, type = "class")
# Calcular métricas
confusion_matrix <- confusionMatrix(predictions, dataframe$inclinacion_peligrosa)
}
data <- read.csv("arbolado-mza-dataset.csv")
data$inclinacion_peligrosa <- as.factor(data$inclinacion_peligrosa)
print(levels(data$inclinacion_peligrosa))
# Realizar validación cruzada
result <- cross_validation(data, 2)
print(result)
library(caret)
library(rpart)
cross_validation <- function(dataframe, k) {
set.seed(123)  # Para reproducibilidad
# Crear un modelo de control para la validación cruzada
ctrl <- trainControl(method = "cv", number = k, classProbs = TRUE)
# Definir la fórmula
train_formula<-formula(inclinacion_peligrosa~
circ_tronco_cm+
lat+long+
seccion + especie)
# Entrenar el modelo usando rpart con el control definido
tree_model<-rpart(train_formula, data=dataframe, method='class')
# Calcular las predicciones en la validación cruzada
predictions <- predict(tree_model, newdata = dataframe, type = "class")
# Calcular métricas
confusion_matrix <- confusionMatrix(predictions, dataframe$inclinacion_peligrosa)
}
data <- read.csv("arbolado-mza-dataset.csv")
data$inclinacion_peligrosa <- as.factor(data$inclinacion_peligrosa)
print(levels(data$inclinacion_peligrosa))
# Realizar validación cruzada
result <- cross_validation(data, 2)
print(result)
library(caret)
library(rpart)
cross_validation <- function(dataframe, k) {
set.seed(123)  # Para reproducibilidad
# Crear un modelo de control para la validación cruzada
ctrl <- trainControl(method = "cv", number = k, classProbs = TRUE)
# Definir la fórmula
train_formula<-formula(inclinacion_peligrosa~
circ_tronco_cm+
lat+long+
seccion + especie)
# Entrenar el modelo usando rpart con el control definido
tree_model<-rpart(train_formula, data=dataframe, method='class')
# Calcular las predicciones en la validación cruzada
predictions <- predict(tree_model, newdata = dataframe, type = "class")
# Calcular métricas
confusion_matrix <- confusionMatrix(predictions, dataframe$inclinacion_peligrosa)
}
data <- read.csv("arbolado-mza-dataset.csv")
data$inclinacion_peligrosa <- as.factor(data$inclinacion_peligrosa)
print(levels(data$inclinacion_peligrosa))
# Realizar validación cruzada
result <- cross_validation(data, 4)
print(result)
library(caret)
library(rpart)
cross_validation <- function(dataframe, k) {
set.seed(123)  # Para reproducibilidad
# Crear un modelo de control para la validación cruzada
ctrl <- trainControl(method = "cv", number = k, classProbs = TRUE)
# Definir la fórmula
train_formula<-formula(inclinacion_peligrosa~
circ_tronco_cm+ diametro_tronco
lat+long+
library(caret)
library(rpart)
cross_validation <- function(dataframe, k) {
set.seed(123)  # Para reproducibilidad
# Crear un modelo de control para la validación cruzada
ctrl <- trainControl(method = "cv", number = k, classProbs = TRUE)
# Definir la fórmula
train_formula<-formula(inclinacion_peligrosa~
circ_tronco_cm+ diametro_tronco +
lat+long+
seccion + especie)
# Entrenar el modelo usando rpart con el control definido
tree_model<-rpart(train_formula, data=dataframe, method='class')
# Calcular las predicciones en la validación cruzada
predictions <- predict(tree_model, newdata = dataframe, type = "class")
# Calcular métricas
confusion_matrix <- confusionMatrix(predictions, dataframe$inclinacion_peligrosa)
}
data <- read.csv("arbolado-mza-dataset.csv")
data$inclinacion_peligrosa <- as.factor(data$inclinacion_peligrosa)
print(levels(data$inclinacion_peligrosa))
# Realizar validación cruzada
result <- cross_validation(data, 4)
print(result)
library(caret)
library(rpart)
cross_validation <- function(dataframe, k) {
set.seed(123)  # Para reproducibilidad
# Crear un modelo de control para la validación cruzada
ctrl <- trainControl(method = "cv", number = k, classProbs = TRUE)
# Definir la fórmula
train_formula<-formula(inclinacion_peligrosa~ .)
# Entrenar el modelo usando rpart con el control definido
tree_model<-rpart(train_formula, data=dataframe, method='class')
# Calcular las predicciones en la validación cruzada
predictions <- predict(tree_model, newdata = dataframe, type = "class")
# Calcular métricas
confusion_matrix <- confusionMatrix(predictions, dataframe$inclinacion_peligrosa)
}
data <- read.csv("arbolado-mza-dataset.csv")
data$inclinacion_peligrosa <- as.factor(data$inclinacion_peligrosa)
print(levels(data$inclinacion_peligrosa))
# Realizar validación cruzada
result <- cross_validation(data, 4)
print(result)
